on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        type: string

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
    - name: configure git
      run: |
        git config --global user.name 'Andrew Erickson'
        git config --global user.email aerickson@mozilla.com
    - name: clone target
      uses: actions/checkout@v2
      with:
        path: target
        fetch-depth: 0
        token: ${{ secrets.GH_TOKEN }}
    - name: clone runbooks
      uses: actions/checkout@v2
      with:
        path: runbooks
        repository: deadsnakes/runbooks
    - name: pull upstream
      run: runbooks/import-upstream --repo target ${{ github.event.inputs.version }}
  build:
    needs: update
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        - name: bionic
        - name: focal
    steps:
    - name: configure debian and git
      run: |
        echo 'DEBEMAIL=aerickson@mozilla.com' >> $GITHUB_ENV
        echo 'DEBFULLNAME=Andrew Erickson (aerickson)' >> $GITHUB_ENV
        git config --global user.name 'Andrew Erickson'
        git config --global user.email aerickson@mozilla.com
    - name: clone target
      uses: actions/checkout@v2
      with:
        path: target
        fetch-depth: 0
        token: ${{ secrets.GH_TOKEN }}
    - name: clone runbooks
      uses: actions/checkout@v2
      with:
        path: runbooks
        repository: deadsnakes/runbooks
    - uses: actions/setup-python@v2
    - name: install gbp
      run: pip install gbp==0.9.24
    - name: install devscripts
      run: sudo apt-get update -qq && sudo apt-get install -y devscripts
#     - name: import gpg key
#       run: |
#         install --directory ~/.gnupg --mode 700
#         base64 -d <<< '${{ secrets.GPG_PUBLIC }}' > ~/.gnupg/pubring.gpg
#         base64 -d <<< '${{ secrets.GPG_SECRET }}' > ~/.gnupg/secring.gpg
#         chmod 600 ~/.gnupg/*
    - name: update branch
      run: SHELL=false runbooks/refresh-patches --repo target ubuntu/${{ matrix.name }}
    - name: build
      run: mkdir dist && cd target && ../runbooks/build
    - name: test
      run: runbooks/quick-test --distrib-codename ${{ matrix.name }} --dist-dir dist --src-dir target
#     - name: release
#       run: cd target && ../runbooks/release
